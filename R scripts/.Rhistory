help.start()
q()
q()
clrscr;
license()
x <- (2,3,4,5)
x<-c(2,3,4,5)
x
length(x)
y=c(-1,-2,-3,-4)
x+y
ls()
rm(x)
ls()
x=y+(1,1,1,1)
x=y+c(1,1,1,1)
x
ls()
rm(list=ls())
ls()
q()
q()
q()
q()
plot(x)
x={1,2,3}
x=c(1,2,3)
x
plot(x)
y=c(3,1,2)
plot(x,y)
mean(y)
sr(y)
sd(y)
plot(x,y,xlab="x axis", ylab="y axis")
plot(x,y,xlab="x axis", ylab="y axis", main=Oxy graph)
plot(x,y,xlab="x axis", ylab="y axis", main="Oxy graph")
plot(x,y,xlab="x axis", ylab="y axis", main="Oxy graph",col="green")
seq(1,10,length=10)
seq(2,10,length=10)
f=outer(x,y,function(x,y)cos(y)/(1+x^2)
;
f=outer(x,y,function(x,y)cos(y)/(1+x^2)
contour(x,y,f)
f=outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
x=c(1,2,3,4,5,6,7,8,9,10)
y=rnorm(0,10)
y
y=rnorm(100)
y
y=rnorm(100,50)
y
y=rnorm(10,10)
y
y=rnorm(10,10,5)
y
x
y
f=outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
y=x
f=outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
?contour
contour(x,y,f,nlevels=45,add=T)
fa=(f-t(f))/2
contour(x,y,fa,nlevels-15)
contour(x,y,fa,nlevels=15)
contour(x,y,f,nlevels=45,add=T)
q()
q()
q()
a <- c(1,2)
a
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
installr
updateR()
updateR()
install.packages("installr") # install installr
updateR()
library(installr) #load
install.packages("stringr")
updateR()
q()
title("Projection onto a = (1, 0)")
par(mar = c(2, 2, 2, 0.4), mgp = c(2, 1, 0), mfrow = c(1, 2))
bullseye.pathname <- paste(tc.dir,"bullseye-2.R", sep = dir.sep)
source(bullseye.pathname)
plot(X, type = "n", xlab = "", ylab = "", xaxt = "n", yaxt = "n")
points(X[group.id == 1,], pch = 20, col = "black")
points(X[group.id == 2,], pch = 8, col = "red", cex = 0.8)
title("Bullseye")
##
a <- c(1, 0)
proj <- X %*% a
hist(proj, col = "green", nclass = 15, main = "", xlab = "", ylab = "")
title("Projection onto a = (1, 0)")
par(mar = c(2, 2, 2, 0.4), mgp = c(2, 1, 0), mfrow = c(1, 2))
bullseye.pathname <- paste(tc.dir,"bullseye-2.R", sep = dir.sep)
nscen <- 3
Xlist <- vector("list", nscen)
Xlist
typeof(Xlist)
typeof(nscen)
Xlist <- vector("double", nscen)
Xlist
?Xlist
??Xlist
X <- Xlist[[1]]
Xlist
Xlist <- vector("list", nscen)
X <- Xlist[[1]]
Xlist
n1 <- 100
n2 <- 100
group.id <- c(rep(1, n1), rep(2, n2))
offset.cov.marix <- matrix(c(0.0, 0.0,
4.5, 0.0,
6.0, 0.0,
0.0, 0.9,
2.0, 0.9,
2.5, 0.9),
nrow = 6, byrow = T)
nscen <- nrow(offset.cov.matrix)
offset.cov.marix
typeof(offset.cov.marix)
nscen <- 6
Xlist <- vector("list", nscen)
for (i in 1:nscen) f
for (i in 1:nscen) {
offset <- offset.cov.matrix[i, 1]
cov <- offset.cov.matrix[i, 2]
Xlist[[i]] <- make.elongated.groups(n1, n2, cov, offset)$X
}
n1 <- 100
n2 <- 100
group.id <- c(rep(1, n1), rep(2, n2))
offset_cov_marix <- matrix(c(0.0, 0.0,
4.5, 0.0,
6.0, 0.0,
0.0, 0.9,
2.0, 0.9,
2.5, 0.9),
nrow = 6, byrow = T)
offset_cov_marix
typeof(offset_cov_marix)
nscen <- 6
Xlist <- vector("list", nscen)
for (i in 1:nscen) {
offset <- offset_cov_matrix[i, 1]
cov <- offset_cov_matrix[i, 2]
Xlist[[i]] <- make.elongated.groups(n1, n2, cov, offset)$X
}
offset_cov_marix[1,2]
offset_cov_marix[1,2]
n1 <- 100
n2 <- 100
group.id <- c(rep(1, n1), rep(2, n2))
offset_cov_marix <- matrix(c(0.0, 0.0,
4.5, 0.0,
6.0, 0.0,
0.0, 0.9,
2.0, 0.9,
2.5, 0.9),
nrow = 6, byrow = T)
offset_cov_marix[1,2]
typeof(offset_cov_marix)
#nscen <- nrow(offset.cov.matrix)
nscen <- 6
Xlist <- vector("list", nscen)
for (i in 1:nscen) {
offset_cov_marix[1,2]
offset <- offset_cov_matrix[i, 1]
cov <- offset_cov_matrix[i, 2]
Xlist[[i]] <- make.elongated.groups(n1, n2, cov, offset)$X
}
offset_cov_marix[1,1]
n1 <- 100
n2 <- 100
group.id <- c(rep(1, n1), rep(2, n2))
offset_cov_marix <- matrix(c(0.0, 0.0,
4.5, 0.0,
6.0, 0.0,
0.0, 0.9,
2.0, 0.9,
2.5, 0.9),
nrow = 6, byrow = T)
offset_cov_marix[1,2]
typeof(offset_cov_marix)
#nscen <- nrow(offset.cov.matrix)
nscen <- 6
Xlist <- vector("list", nscen)
for (i in 1:nscen) {
offset_cov_marix[1,1]
offset <- offset_cov_matrix[i, 1]
cov <- offset_cov_matrix[i, 2]
#Xlist[[i]] <- make.elongated.groups(n1, n2, cov, offset)$X
}
n1 <- 100
n2 <- 100
group.id <- c(rep(1, n1), rep(2, n2))
offset_cov_marix <- matrix(c(0.0, 0.0,
4.5, 0.0,
6.0, 0.0,
0.0, 0.9,
2.0, 0.9,
2.5, 0.9),
nrow = 6, byrow = T)
offset_cov_marix[1,2]
typeof(offset_cov_marix)
#nscen <- nrow(offset.cov.matrix)
nscen <- 6
Xlist <- vector("list", nscen)
for (i in 1:nscen) {
offset <- offset_cov_matrix[1, 1]
cov <- offset_cov_matrix[1, 2]
#Xlist[[i]] <- make.elongated.groups(n1, n2, cov, offset)$X
}
n1 <- 100
n2 <- 100
group.id <- c(rep(1, n1), rep(2, n2))
offset_cov_matrix <- matrix(c(0.0, 0.0,
4.5, 0.0,
6.0, 0.0,
0.0, 0.9,
2.0, 0.9,
2.5, 0.9),
nrow = 6, byrow = T)
offset_cov_matrix[1,2]
typeof(offset_cov_matrix)
#nscen <- nrow(offset.cov.matrix)
nscen <- 6
Xlist <- vector("list", nscen)
for (i in 1:nscen) {
offset <- offset_cov_matrix[1, 1]
cov <- offset_cov_matrix[1, 2]
#Xlist[[i]] <- make.elongated.groups(n1, n2, cov, offset)$X
}
n1 <- 100
n2 <- 100
group.id <- c(rep(1, n1), rep(2, n2))
offset_cov_matrix <- matrix(c(0.0, 0.0,
4.5, 0.0,
6.0, 0.0,
0.0, 0.9,
2.0, 0.9,
2.5, 0.9),
nrow = 6, byrow = T)
offset_cov_matrix[1,2]
typeof(offset_cov_matrix)
#nscen <- nrow(offset.cov.matrix)
nscen <- 6
Xlist <- vector("list", nscen)
for (i in 1:nscen) {
offset <- offset_cov_matrix[i, 1]
cov <- offset_cov_matrix[i, 2]
#Xlist[[i]] <- make.elongated.groups(n1, n2, cov, offset)$X
}
n1 <- 100
n2 <- 100
group.id <- c(rep(1, n1), rep(2, n2))
offset_cov_matrix <- matrix(c(0.0, 0.0,
4.5, 0.0,
6.0, 0.0,
0.0, 0.9,
2.0, 0.9,
2.5, 0.9),
nrow = 6, byrow = T)
offset_cov_matrix[1,2]
typeof(offset_cov_matrix)
#nscen <- nrow(offset.cov.matrix)
nscen <- 6
Xlist <- vector("list", nscen)
for (i in 1:nscen) {
offset <- offset_cov_matrix[i, 1]
cov <- offset_cov_matrix[i, 2]
Xlist[[i]] <- make.elongated.groups(n1, n2, cov, offset)$X
}
updateR()
library("installr")
updateR()
updateR()
q()
# This scripts used package 'protr' to calculate SOCN and QSO
scriptPath <- function() {
getSrcDirectory(scriptPath);
}
scriptPath
setwd(scriptPath())
source('F:/Hoc/uet/Nam 3/NCKH/predict_phosphorylation/peptide sequence to feature table/src/R scripts/protr.R', echo=TRUE)
# This scripts used package 'protr' to calculate SOCN and QSO
scriptPath <- function() {
getSrcDirectory(scriptPath);
}
scriptPath
setwd(scriptPath())
scriptPath
scriptPath()
source('F:/Hoc/uet/Nam 3/NCKH/predict_phosphorylation/peptide sequence to feature table/src/R scripts/protr.R', echo=TRUE)
setwd(scriptPath())
install.packages('protr')
x = readFASTA(system.file('protseq/P00750.fasta', package = 'protr'))[[1]]
library('protr')
x = readFASTA(system.file('protseq/P00750.fasta', package = 'protr'))[[1]]
x
extractSOCN(x)
source('F:/Hoc/uet/Nam 3/NCKH/predict_phosphorylation/peptide sequence to feature table/src/R scripts/protr.R')
socn = extractSOCN(x)
dim(socn)
shape(socn)
socn
typeof(socn)
length(socn)
x = 'RKEDQNGASTPHYCLVIMFW'
socn = extractSOCN(x)
?extractSOCN
x = readFASTA(system.file('protseq/P00750.fasta', package = 'protr'))[[1]]
x
extractSOCN(x)
x = readFASTA(system.file('protseq/P00750.fasta', package = 'protr'))
x
